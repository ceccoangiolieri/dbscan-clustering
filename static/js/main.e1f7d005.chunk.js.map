{"version":3,"sources":["actions/actions.js","reducers/index.js","Map/hereTileLayers.js","Map/Map.jsx","Controls/Control.jsx","App.jsx","index.js"],"names":["fetchHerePlaces","payload","dispatch","getState","requestPlacesResults","category","boundingbox","placesControls","url","URL","params","app_id","app_code","in","size","cat","search","URLSearchParams","fetch","then","response","json","data","processPlacesResponse","color","catch","error","console","doUpdateBoundingBox","bbox","_southWest","lng","lat","_northEast","join","updateBoundingBox","type","computeDbScan","updateDbScanSettings","settings","Object","objectSpread","results","items","length","parsePlacesResponse","receivePlacesResults","places","initialPlacesState","message","receivedAt","lastCall","Date","now","dbscanSettings","minPoints","maxDistance","lastCompute","rootReducer","combineReducers","state","arguments","undefined","action","defineProperty","setting","value","isFetching","hasOwnProperty","concat","toConsumableArray","HereTileLayers","HERE","L","extend","options","subdomains","minZoom","maxZoom","scheme","resource","mapId","format","appId","appCode","initialize","schemeStart","this","split","tileResolution","retina","tileServer","indexOf","tileUrl","_attributionUrl","template","prototype","call","_attributionText","onAdd","map","_attributionBBoxes","_fetchAttributionBBoxes","onRemove","_map","attributionControl","removeAttribution","off","_findCopyrightBBox","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","_parseAttributionBBoxes","JSON","parse","responseText","open","send","providers","normal","i","boxes","j","box","on","_attributionProviders","visibleProviders","zoom","getZoom","visibleBounds","getBounds","minLevel","maxLevel","push","overlaps","attributions","provider","alt","label","attributionText","addAttribution","here","opts","style","width","height","hereReducedDay","placesLayer","featureGroup","clusterLayer","southWest","latLng","northEast","mapParams","center","zoomControl","maxBounds","latLngBounds","layers","Map","_this","props","createPane","opacity","baseMaps","HERE reduced.day","overlayMaps","Points of interest","Clusters","control","addTo","position","brand","div","DomUtil","create","innerHTML","hereLogo","addControl","clearLayers","clusters","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","features","Symbol","iterator","next","done","feature","properties","dbscan","point","geometry","coordinates","cluster","err","return","scaleHsl","chroma","scale","mode","colors","keys","cnt","icon","description","title","clusterObj","hull","concave","featureCollection","geoJSON","fillColor","weight","pane","bindTooltip","parseInt","permanent","sticky","openTooltip","bringToBack","prevProps","_this$props","addPlaces","inputPoints","toGeoJSON","clustered","clustersDbscan","processClusters","place","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","placeObj","circleMarker","orig_color","radius","id","react_default","a","createElement","React","Component","connect","_state$placesControls","segmentStyle","zIndex","top","left","maxHeight","overflow","padding","herePlaces","0","name","1","2","3","4","5","6","7","8","9","10","11","12","13","14","16","17","Control","handleClick","event","setState","handleClickDbscan","componentDidUpdate","toast","topic","time","_this2","isCalculatingDbScan","Segment","Header","as","href","rel","target","className","build","discrete","start","min","max","step","onChange","Popup","content","trigger","Label","Button","circular","disabled","_","isEmpty","onClick","Divider","Loader","active","right","key","index","isDisabled","loading","react_semantic_toasts_build","App","src_Map_Map","Controls_Control","middleware","thunk","store","createStore","reducer","composeWithDevTools","applyMiddleware","apply","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e1f7d005.chunk.js","sourcesContent":["const hereAppCode = '0XXQyxbiCjVU7jN2URXuhg'\nconst hereAppId = 'yATlKFDZwdLtjHzyTeCK'\n\nexport const RECEIVE_PLACES_RESULTS = 'RECEIVE_PLACES_RESULTS'\nexport const REQUEST_PLACES_RESULTS = 'REQUEST_PLACES_RESULTS'\nexport const UPDATE_BBOX = 'UPDATE_BBOX'\nexport const UPDATE_DBSCAN_SETTINGS = 'UPDATE_DBSCAN_SETTINGS'\nexport const COMPUTE_DBSCAN = 'COMPUTE_DBSCAN'\nexport const RESULT_HANDLER = 'RESULT_HANDLER'\n\nexport const fetchHerePlaces = payload => (dispatch, getState) => {\n  dispatch(requestPlacesResults({ category: payload.category }))\n\n  const { boundingbox } = getState().placesControls\n\n  const url = new URL(\n    'https://places.demo.api.here.com/places/v1/discover/explore'\n  )\n  const params = {\n    app_id: hereAppId,\n    app_code: hereAppCode,\n    //west longitude, south latitude, east longitude, north latitude.\n    in: boundingbox,\n    size: 500,\n    cat: payload.category\n  }\n\n  url.search = new URLSearchParams(params)\n\n  return fetch(url)\n    .then(response => response.json())\n    .then(data =>\n      dispatch(\n        processPlacesResponse(\n          data,\n          payload.category,\n          boundingbox,\n          payload.color\n        )\n      )\n    )\n    .catch(error => console.error(error)) //eslint-disable-line\n}\n\nexport const doUpdateBoundingBox = boundingbox => dispatch => {\n  const bbox = [\n    boundingbox._southWest.lng,\n    boundingbox._southWest.lat,\n    boundingbox._northEast.lng,\n    boundingbox._northEast.lat\n  ].join(',')\n\n  dispatch(updateBoundingBox(bbox))\n}\n\nexport const sendMessage = message => ({\n  type: RESULT_HANDLER,\n  payload: message\n})\n\nconst updateBoundingBox = bbox => ({\n  type: UPDATE_BBOX,\n  payload: bbox\n})\n\nexport const computeDbScan = () => ({\n  type: COMPUTE_DBSCAN\n})\n\nexport const updateDbScanSettings = settings => ({\n  type: UPDATE_DBSCAN_SETTINGS,\n  payload: { ...settings }\n})\n\nconst parsePlacesResponse = json => {\n  if (json.results && json.results.items.length > 0) {\n    return json.results.items\n  }\n  return []\n}\n\nconst processPlacesResponse = (json, category, bbox, color) => dispatch => {\n  const results = parsePlacesResponse(json)\n  dispatch(\n    receivePlacesResults({\n      data: results,\n      category: category,\n      boundingbox: bbox,\n      color: color\n    })\n  )\n}\n\nexport const receivePlacesResults = places => ({\n  type: RECEIVE_PLACES_RESULTS,\n  payload: places\n})\n\nexport const requestPlacesResults = category => ({\n  type: REQUEST_PLACES_RESULTS,\n  payload: category\n})\n","import { combineReducers } from 'redux'\nimport {\n  REQUEST_PLACES_RESULTS,\n  RECEIVE_PLACES_RESULTS,\n  UPDATE_BBOX,\n  UPDATE_DBSCAN_SETTINGS,\n  COMPUTE_DBSCAN,\n  RESULT_HANDLER\n} from '../actions/actions'\n\nconst initialPlacesState = {\n  boundingbox: '',\n  message: { receivedAt: 0 },\n  lastCall: Date.now(),\n  places: {},\n  dbscanSettings: {\n    minPoints: 10,\n    maxDistance: 500\n  },\n  lastCompute: 0\n}\n\nconst placesControls = (state = initialPlacesState, action) => {\n  switch (action.type) {\n    case RESULT_HANDLER:\n      return {\n        ...state,\n        message: {\n          ...state.message,\n          ...action.payload,\n          receivedAt: Date.now()\n        }\n      }\n\n    case COMPUTE_DBSCAN:\n      return {\n        ...state,\n        lastCompute: Date.now()\n      }\n\n    case UPDATE_DBSCAN_SETTINGS:\n      return {\n        ...state,\n        dbscanSettings: {\n          ...state.dbscanSettings,\n          [action.payload.setting]: action.payload.value\n        }\n      }\n\n    case UPDATE_BBOX:\n      return {\n        ...state,\n        boundingbox: action.payload\n      }\n    case REQUEST_PLACES_RESULTS:\n      return {\n        ...state,\n        places: {\n          ...state.places,\n          [action.payload.category]: {\n            ...state.places[action.payload.category],\n            isFetching: true\n          }\n        }\n      }\n\n    case RECEIVE_PLACES_RESULTS:\n      return {\n        ...state,\n        lastCall: Date.now(),\n        places: {\n          ...state.places,\n          [action.payload.category]: {\n            ...state.places[action.payload.category],\n            data: state.places[action.payload.category].hasOwnProperty('data')\n              ? [\n                  ...state.places[action.payload.category].data,\n                  ...action.payload.data\n                ]\n              : action.payload.data,\n            boundingbox: action.payload.boundingbox,\n            color: action.payload.color,\n            isFetching: false\n          }\n        }\n      }\n\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  placesControls\n})\n\nexport default rootReducer\n","import * as L from 'leaflet'\n\nconst HereTileLayers = {}\n\n// 🍂class TileLayer.HERE\n// Tile layer for HERE maps tiles.\nHereTileLayers.HERE = L.TileLayer.extend({\n  options: {\n    subdomains: '1234',\n    minZoom: 2,\n    maxZoom: 18,\n\n    // 🍂option scheme: String = 'normal.day'\n    // The \"map scheme\", as documented in the HERE API.\n    scheme: 'normal.day',\n\n    // 🍂option resource: String = 'maptile'\n    // The \"map resource\", as documented in the HERE API.\n    resource: 'maptile',\n\n    // 🍂option mapId: String = 'newest'\n    // Version of the map tiles to be used, or a hash of an unique map\n    mapId: 'newest',\n\n    // 🍂option format: String = 'png8'\n    // Image format to be used (`png8`, `png`, or `jpg`)\n    format: 'png8',\n\n    // 🍂option appId: String = ''\n    // Required option. The `app_id` provided as part of the HERE credentials\n    appId: '',\n\n    // 🍂option appCode: String = ''\n    // Required option. The `app_code` provided as part of the HERE credentials\n    appCode: ''\n  },\n\n  initialize: function initialize(options) {\n    options = L.setOptions(this, options)\n\n    // Decide if this scheme uses the aerial servers or the basemap servers\n    const schemeStart = options.scheme.split('.')[0]\n    options.tileResolution = 256\n\n    if (L.Browser.retina) {\n      options.tileResolution = 512\n    }\n\n    //    {Base URL}{Path}/{resource (tile type)}/{map id}/{scheme}/{zoom}/{column}/{row}/{size}/{format}\n    //    ?app_id={YOUR_APP_ID}\n    //    &app_code={YOUR_APP_CODE}\n    //    &{param}={value}\n\n    const path =\n      '/{resource}/2.1/{resource}/{mapId}/{scheme}/{z}/{x}/{y}/{tileResolution}/{format}?app_id={appId}&app_code={appCode}'\n    const attributionPath =\n      '/maptile/2.1/copyright/{mapId}?app_id={appId}&app_code={appCode}'\n\n    let tileServer = 'base.maps.api.here.com'\n    if (\n      // eslint-disable-next-line\n      schemeStart == 'satellite' ||\n      // eslint-disable-next-line\n      schemeStart == 'terrain' ||\n      // eslint-disable-next-line\n      schemeStart == 'hybrid'\n    ) {\n      tileServer = 'aerial.maps.api.here.com'\n    }\n    if (options.scheme.indexOf('.traffic.') !== -1) {\n      tileServer = 'traffic.maps.api.here.com'\n    }\n\n    const tileUrl = 'https://{s}.' + tileServer + path\n\n    this._attributionUrl = L.Util.template(\n      'https://1.' + tileServer + attributionPath,\n      this.options\n    )\n\n    L.TileLayer.prototype.initialize.call(this, tileUrl, options)\n\n    this._attributionText = ''\n  },\n\n  onAdd: function onAdd(map) {\n    L.TileLayer.prototype.onAdd.call(this, map)\n\n    if (!this._attributionBBoxes) {\n      this._fetchAttributionBBoxes()\n    }\n  },\n\n  onRemove: function onRemove(map) {\n    L.TileLayer.prototype.onRemove.call(this, map)\n\n    this._map.attributionControl.removeAttribution(this._attributionText)\n\n    this._map.off('moveend zoomend resetview', this._findCopyrightBBox, this)\n  },\n\n  _fetchAttributionBBoxes: function _onMapMove() {\n    const xmlhttp = new XMLHttpRequest()\n    xmlhttp.onreadystatechange = L.bind(function() {\n      // eslint-disable-next-line\n      if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\n        this._parseAttributionBBoxes(JSON.parse(xmlhttp.responseText))\n      }\n    }, this)\n    xmlhttp.open('GET', this._attributionUrl, true)\n    xmlhttp.send()\n  },\n\n  _parseAttributionBBoxes: function _parseAttributionBBoxes(json) {\n    if (!this._map) {\n      return\n    }\n    const providers = json[this.options.scheme.split('.')[0]] || json.normal\n    for (let i = 0; i < providers.length; i++) {\n      if (providers[i].boxes) {\n        for (let j = 0; j < providers[i].boxes.length; j++) {\n          const box = providers[i].boxes[j]\n          providers[i].boxes[j] = L.latLngBounds([\n            [box[0], box[1]],\n            [box[2], box[3]]\n          ])\n        }\n      }\n    }\n\n    this._map.on('moveend zoomend resetview', this._findCopyrightBBox, this)\n\n    this._attributionProviders = providers\n\n    this._findCopyrightBBox()\n  },\n\n  _findCopyrightBBox: function _findCopyrightBBox() {\n    if (!this._map) {\n      return\n    }\n    const providers = this._attributionProviders\n    const visibleProviders = []\n    const zoom = this._map.getZoom()\n    const visibleBounds = this._map.getBounds()\n\n    for (let i = 0; i < providers.length; i++) {\n      if (providers[i].minLevel < zoom && providers[i].maxLevel > zoom) {\n        if (!providers[i].boxes) {\n          // No boxes = attribution always visible\n          visibleProviders.push(providers[i])\n          break\n        }\n      }\n\n      for (let j = 0; j < providers[i].boxes.length; j++) {\n        const box = providers[i].boxes[j]\n        if (visibleBounds.overlaps(box)) {\n          visibleProviders.push(providers[i])\n          break\n        }\n      }\n    }\n\n    const attributions = [\n      '<a href=\"https://legal.here.com/terms/serviceterms/gb/\">HERE maps</a>'\n    ]\n    // eslint-disable-next-line\n    for (let i = 0; i < visibleProviders.length; i++) {\n      const provider = visibleProviders[i]\n      attributions.push(\n        '<abbr title=\"' + provider.alt + '\">' + provider.label + '</abbr>'\n      )\n    }\n\n    const attributionText = '© ' + attributions.join(', ') + '. '\n\n    if (attributionText !== this._attributionText) {\n      this._map.attributionControl.removeAttribution(this._attributionText)\n      this._map.attributionControl.addAttribution(\n        (this._attributionText = attributionText)\n      )\n    }\n  }\n})\n\nHereTileLayers.here = function(opts) {\n  return new HereTileLayers.HERE(opts)\n}\n\nexport default HereTileLayers\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport L from 'leaflet'\n//import _ from 'lodash'\nimport PropTypes from 'prop-types'\nimport {\n  //nearest,\n  clustersDbscan,\n  concave,\n  point,\n  featureCollection\n} from '@turf/turf'\nimport { doUpdateBoundingBox, sendMessage } from '../actions/actions'\n\nimport HereTileLayers from './hereTileLayers'\n\nimport chroma from 'chroma-js'\n\n// defining the container styles the map sits in\nconst style = {\n  width: '100%',\n  height: '100vh'\n}\n\n// using the reduced.day map styles, have a look at the imported hereTileLayers for more\nconst hereReducedDay = HereTileLayers.here({\n  appId: 'jKco7gLGf0WWlvS5n2fl',\n  appCode: 'HQnCztY23zh2xiTPCFiTMA',\n  scheme: 'reduced.day'\n})\n\n// for this app we create two leaflet layer groups to control, one for the isochrone centers and one for the isochrone contours\nconst placesLayer = L.featureGroup()\nconst clusterLayer = L.featureGroup()\n\n// we define our bounds of the map\nconst southWest = L.latLng(-90, -180)\n\nconst northEast = L.latLng(90, 180)\n\nconst bounds = L.latLngBounds(southWest, northEast)\n\n// a leaflet map consumes parameters, I'd say they are quite self-explanatory\nconst mapParams = {\n  center: [40.7569, -73.9837],\n  zoomControl: false,\n  maxBounds: bounds,\n  zoom: 13,\n  layers: [placesLayer, clusterLayer, hereReducedDay]\n}\n\n// this you have seen before, we define a react component\nclass Map extends React.Component {\n  static propTypes = {\n    lastCall: PropTypes.number,\n    lastCompute: PropTypes.number,\n    dbscanSettings: PropTypes.object,\n    dispatch: PropTypes.func.isRequired,\n    places: PropTypes.object\n  }\n\n  // and once the component has mounted we add everything to it\n  componentDidMount() {\n    // our map!\n\n    const { dispatch } = this.props\n\n    this.map = L.map('map', mapParams)\n\n    // we create a leaflet pane which will hold all isochrone polygons with a given opacity\n    const clusterPane = this.map.createPane('clusterPane')\n    clusterPane.style.opacity = 0.9\n\n    // our basemap and add it to the map\n    const baseMaps = {\n      'HERE reduced.day': hereReducedDay\n    }\n\n    const overlayMaps = {\n      'Points of interest': placesLayer,\n      Clusters: clusterLayer\n    }\n\n    L.control.layers(baseMaps, overlayMaps).addTo(this.map)\n\n    // we do want a zoom control\n    L.control\n      .zoom({\n        position: 'topright'\n      })\n      .addTo(this.map)\n\n    // and for the sake of advertising your company, you may add a logo to the map\n    const brand = L.control({\n      position: 'bottomright'\n    })\n    brand.onAdd = function(map) {\n      const div = L.DomUtil.create('div', 'brand')\n      div.innerHTML =\n        '<a href=\"https://gis.ops.com\" target=\"_blank\"><div class=\"gis-ops-logo\"></a>'\n      return div\n    }\n    const hereLogo = L.control({\n      position: 'bottomright'\n    })\n    hereLogo.onAdd = function(map) {\n      const div = L.DomUtil.create('div', 'brand')\n      div.innerHTML =\n        '<a href=\"https://developer.here.com/\" target=\"_blank\"><div class=\"here-logo\"></div></a>'\n      return div\n    }\n    this.map.addControl(hereLogo)\n    this.map.addControl(brand)\n\n    this.map.on('moveend', () => {\n      dispatch(doUpdateBoundingBox(this.map.getBounds()))\n    })\n\n    // this.map.on('mousemove', e => {\n    //   if (placesLayer.getLayers().length > 0) {\n    //     // thanks to https://codepen.io/lknarf/pen/JXybxX\n    //     const closestPoints = this.getClosestPoints(e)\n    //     this.styleMarkers(closestPoints)\n    //   }\n    // })\n    const bbox = this.map.getBounds()\n    dispatch(doUpdateBoundingBox(bbox))\n  }\n\n  // styleMarkers = closestPoints => {\n  //   const poiIds = closestPoints.map(pointFeature => {\n  //     return pointFeature.id\n  //   })\n  //   _.each(placesLayer._layers, (layer, index) => {\n  //     if (poiIds.includes(layer.options.id)) {\n  //       layer.setStyle({ color: '#65958C', radius: 20 })\n  //     } else {\n  //       layer.setStyle({ color: layer.options.orig_color, radius: 5 })\n  //     }\n  //   })\n  // }\n\n  // getClosestPoints = e => {\n  //   let allJson = _.clone(placesLayer.toGeoJSON())\n  //   allJson.features = allJson.features.map((feature, index) => ({\n  //     ...feature,\n  //     id: index\n  //   }))\n  //   const currentPoint = {\n  //     type: 'Feature',\n  //     geometry: {\n  //       type: 'Point',\n  //       coordinates: [e.latlng.lng, e.latlng.lat]\n  //     }\n  //   }\n  //   const closest = []\n  //   for (let i = 1; i < 10; i++) {\n  //     const near = nearest(currentPoint, allJson)\n  //     closest.push(near)\n  //     _.remove(allJson.features, feature => {\n  //       return feature.id === near.id\n  //     })\n\n  //     allJson = {\n  //       type: 'FeatureCollection',\n  //       features: _.without(allJson.features, near)\n  //     }\n  //   }\n  //   return closest\n  // }\n\n  processClusters(data) {\n    const { dispatch } = this.props\n\n    clusterLayer.clearLayers()\n\n    const clusters = {}\n\n    for (const feature of data.features) {\n      if (\n        feature.properties.dbscan === 'noise' ||\n        feature.properties.dbscan === 'edge'\n      ) {\n        if (clusters.hasOwnProperty(feature.properties.dbscan)) {\n          clusters[feature.properties.dbscan].push(\n            point(feature.geometry.coordinates)\n          )\n        } else {\n          clusters[feature.properties.dbscan] = []\n        }\n      } else if (feature.properties.dbscan === 'core') {\n        if (clusters.hasOwnProperty(feature.properties.cluster)) {\n          clusters[feature.properties.cluster].push(\n            point(feature.geometry.coordinates)\n          )\n        } else {\n          clusters[feature.properties.cluster] = []\n        }\n      }\n    }\n\n    const scaleHsl = chroma\n      .scale(['#919098', '#FFCFD2', '#A3C4BC', '#DCEED1', '#A8D4AD'])\n      .mode('hsl')\n      .colors(Object.keys(clusters).length)\n\n    let cnt = 0\n    if (Object.keys(clusters).length == 1) {\n      dispatch(\n        sendMessage({\n          type: 'warning',\n          icon: 'warning',\n          description: 'No clusters found, try and change your settings',\n          title: 'DBScan settings'\n        })\n      )\n    } else {\n      for (const clusterObj in clusters) {\n        if (clusterObj !== 'noise' && clusterObj !== 'edge') {\n          const hull = concave(\n            featureCollection(clusters[clusterObj]) /*options*/\n          )\n          if (clusters[clusterObj].length > 0) {\n            L.geoJSON(hull, {\n              style: {\n                fillColor: scaleHsl[cnt],\n                weight: 2,\n                opacity: 1,\n                color: scaleHsl[cnt],\n                pane: 'clusterPane'\n              }\n            })\n              .addTo(clusterLayer)\n              .bindTooltip(\n                '<strong>Cluster number:</strong> ' +\n                  (parseInt(clusterObj) + 1) +\n                  '<br/> ' +\n                  '<strong>Amount of points in cluster:</strong> ' +\n                  clusters[clusterObj].length,\n                {\n                  permanent: false,\n                  sticky: true\n                }\n              )\n              .openTooltip()\n            clusterLayer.bringToBack()\n          }\n        }\n        cnt += 1\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { lastCall, lastCompute, dbscanSettings } = this.props\n    if (lastCall > prevProps.lastCall) {\n      this.addPlaces()\n    }\n\n    if (lastCompute > prevProps.lastCompute) {\n      const inputPoints = placesLayer.toGeoJSON()\n      const maxDistance = dbscanSettings.maxDistance / 1000\n      const minPoints = dbscanSettings.minPoints\n      // console.log(points)\n      const clustered = clustersDbscan(inputPoints, maxDistance, {\n        minPoints: minPoints\n      })\n      this.processClusters(clustered)\n    }\n  }\n\n  addPlaces() {\n    placesLayer.clearLayers()\n\n    const { places } = this.props\n\n    let cnt = 0\n    for (const place in places) {\n      if (\n        places[place].hasOwnProperty('data') &&\n        places[place].data.length > 0\n      ) {\n        for (const placeObj of places[place].data) {\n          L.circleMarker([placeObj.position[0], placeObj.position[1]], {\n            color: places[place].color,\n            orig_color: places[place].color,\n            radius: 5,\n            id: cnt,\n            weight: 1\n          })\n            .addTo(placesLayer)\n            .bindTooltip(placeObj.title)\n          cnt += 1\n        }\n      }\n    }\n  }\n\n  render() {\n    return <div id=\"map\" style={style} />\n  }\n}\n\nconst mapStateToProps = state => {\n  const { places, lastCall, lastCompute, dbscanSettings } = state.placesControls\n  return {\n    places,\n    lastCall,\n    lastCompute,\n    dbscanSettings\n  }\n}\n\nexport default connect(mapStateToProps)(Map)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport _ from 'lodash'\nimport { Slider } from 'react-semantic-ui-range'\nimport { SemanticToastContainer, toast } from 'react-semantic-toasts'\n\nimport {\n  Segment,\n  Divider,\n  Button,\n  Header,\n  Loader,\n  Label,\n  Popup\n} from 'semantic-ui-react'\n\nimport {\n  fetchHerePlaces,\n  updateDbScanSettings,\n  computeDbScan\n} from '../actions/actions'\n\nconst segmentStyle = {\n  zIndex: 999,\n  position: 'absolute',\n  width: '400px',\n  top: '10px',\n  left: '10px',\n  //height: '100vh',\n  maxHeight: 'calc(100vh - 3vw)',\n  overflow: 'auto',\n  padding: '20px'\n}\n\nconst herePlaces = {\n  0: { name: 'shopping', color: 'red' },\n  1: { name: 'accommodation', color: 'orange' },\n  2: { name: 'administrative-areas-buildings', color: 'yellow' },\n  3: { name: 'airport', color: 'olive' },\n  4: { name: 'atm-bank-exchange', color: 'green' },\n  5: { name: 'coffee-tea', color: 'teal' },\n  6: { name: 'eat-drink', color: 'blue' },\n  7: { name: 'going-out', color: 'violet' },\n  8: { name: 'hospital-health-care-facility', color: 'purple' },\n  9: { name: 'leisure-outdoor', color: 'pink' },\n  10: { name: 'natural-geographical', color: 'brown' },\n  11: { name: 'petrol-station' },\n  12: { name: 'restaurant', color: 'grey' },\n  13: { name: 'snacks-fast-food', color: 'black' },\n  14: { name: 'sights-museums', color: 'red' },\n  16: { name: 'toilet-rest-area', color: 'yellow' },\n  17: { name: 'transport', color: 'olive' }\n}\n\nclass Control extends React.Component {\n  static propTypes = {\n    places: PropTypes.object,\n    dbscanSettings: PropTypes.object,\n    isCalculatingDbScan: PropTypes.bool,\n    boundingbox: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    message: PropTypes.object\n  }\n\n  handleClick = (event, data) => {\n    const { dispatch } = this.props\n    this.setState({ value: data.name })\n    dispatch(fetchHerePlaces({ category: data.name, color: data.color }))\n  }\n\n  handleClickDbscan = (event, data) => {\n    const { dispatch } = this.props\n    dispatch(computeDbScan())\n  }\n\n  componentDidUpdate = prevProps => {\n    const { message } = this.props\n\n    if (message.receivedAt > prevProps.message.receivedAt) {\n      toast({\n        type: message.type,\n        icon: message.icon,\n        title: message.topic,\n        description: message.description,\n        time: 5000\n      })\n    }\n  }\n\n  render() {\n    const {\n      places,\n      isCalculatingDbScan,\n      boundingbox,\n      dbscanSettings,\n      dispatch\n    } = this.props\n\n    return (\n      <div>\n        <Segment style={segmentStyle}>\n          <div>\n            <span>\n              <Header as=\"h4\">DBScan with HERE Maps places and TurfJS</Header>\n              <p>\n                Density-based spatial clustering of applications with noise (\n                <a\n                  href=\"https://en.wikipedia.org/wiki/DBSCAN\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\">\n                  DBScan\n                </a>\n                ) is a data clustering algorithm. Given a set of points in some\n                space, it groups together points that are closely packed\n                together (points with many nearby neighbors), marking as\n                outliers points that lie alone in low-density regions (whose\n                nearest neighbors are too far away).\n              </p>\n              <p>\n                This application consumes{' '}\n                <a\n                  href=\"https://developer.here.com/api-explorer/rest/places\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\">\n                  HERE Maps places API\n                </a>{' '}\n                for given categories as point input for the clustering algorithm\n                which is implemented in\n                <a\n                  href=\"https://turfjs.org/docs/#clustersDbscan\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\">\n                  TurfJS\n                </a>\n                .\n              </p>\n            </span>\n          </div>\n          <Header as=\"h5\">DBScan settings</Header>\n          <div className=\"flex flex-row\">\n            <div className=\"w-80\">\n              <Slider\n                discrete\n                color=\"grey\"\n                value={dbscanSettings.maxDistance}\n                settings={{\n                  start: dbscanSettings.maxDistance,\n                  value: dbscanSettings.maxDistance,\n                  min: 100,\n                  max: 5000,\n                  step: 50,\n                  onChange: value => {\n                    dispatch(\n                      updateDbScanSettings({\n                        setting: 'maxDistance',\n                        value: value\n                      })\n                    )\n                  }\n                }}\n              />\n              <div className=\"mt2\">\n                <Popup\n                  content=\"Maximum Distance ε between any point of the cluster to generate the clusters\"\n                  trigger={\n                    <Label size=\"tiny\">\n                      {'Max. distance in meters: ' + dbscanSettings.maxDistance}\n                    </Label>\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"w-80\">\n              <Slider\n                discrete\n                color=\"grey\"\n                value={dbscanSettings}\n                settings={{\n                  start: dbscanSettings.minPoints,\n                  value: dbscanSettings.minPoints,\n                  min: 3,\n                  max: 20,\n                  step: 1,\n                  onChange: value => {\n                    dispatch(\n                      updateDbScanSettings({\n                        setting: 'minPoints',\n                        value: value\n                      })\n                    )\n                  }\n                }}\n              />\n              <div className=\"mt2\">\n                <Popup\n                  content=\"Minimum number of points to generate a single cluster, points which do not meet this requirement will be classified as an 'edge' or 'noise'.\"\n                  trigger={\n                    <Label size=\"tiny\">\n                      {'Min. points: ' + dbscanSettings.minPoints}\n                    </Label>\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"w-20\">\n              <Button\n                circular\n                icon=\"whmcs\"\n                disabled={_.isEmpty(places)}\n                onClick={this.handleClickDbscan}\n              />\n            </div>\n          </div>\n\n          <Divider />\n          <div>\n            <Loader\n              active={isCalculatingDbScan}\n              style={{ right: 0, left: 'unset' }}\n            />\n\n            {Object.keys(herePlaces).map((key, index) => {\n              let isDisabled = false\n              if (places[herePlaces[key].name]) {\n                if (boundingbox === places[herePlaces[key].name].boundingbox) {\n                  isDisabled = true\n                }\n              }\n              return (\n                <div key={index} className=\"mt1 dib\">\n                  <Button\n                    size=\"tiny\"\n                    disabled={isDisabled}\n                    loading={\n                      places[herePlaces[key].name]\n                        ? places[herePlaces[key].name].isFetching\n                        : false\n                    }\n                    onClick={this.handleClick}\n                    name={herePlaces[key].name}\n                    color={herePlaces[key].color}>\n                    {herePlaces[key].name}\n                  </Button>\n                </div>\n              )\n            })}\n          </div>\n        </Segment>\n        <SemanticToastContainer position=\"bottom-center\" />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  const {\n    places,\n    isCalculatingDbScan,\n    boundingbox,\n    dbscanSettings,\n    message\n  } = state.placesControls\n\n  return {\n    places,\n    boundingbox,\n    isCalculatingDbScan,\n    dbscanSettings,\n    message\n  }\n}\n\nexport default connect(mapStateToProps)(Control)\n","import React from 'react'\nimport Map from './Map/Map'\nimport Controls from './Controls/Control'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Map />\n        <Controls />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\n\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\n\nimport reducer from './reducers'\nimport App from './App'\nimport './index.css' // postCSS import of CSS module\n\nconst middleware = [thunk]\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(...middleware))\n)\n\nrender(\n  <Provider store={store}>\n    {' '}\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}